library(caret)
library(tidyverse)
library(plumber)
df %>% head
df <- mtcars %>% as_tibble()
df %>% head
df %>% cor %>% corrplot::corrplot()
set.seed(seed = 0)
X <- df %>% select(wt, qsec, am)
y <- df %>% pull(mpg)
partition <- createDataPartition(y = y, p = 0.75, list = FALSE)
df.train <- df[partition,]
df.test <- df[- partition,]
X.train <- df.train %>% select(wt, qsec, am)
y.train <- df.train %>% pull(mpg)
X.test <- df.test %>% select(wt, qsec, am)
y.test <- df.test %>% pull(mpg)
scaler.obj <- preProcess(x = X.train, method = c('center', 'scale'))
X.train.scaled <- predict(object = scaler.obj, newdata = X.train)
X.test.scaled <- predict(object = scaler.obj, newdata = X.test)
model.obj <-  train(x = X.train.scaled,
y = y.train,
method = 'ridge',
trControl = trainControl(method = 'cv', number = 3),
metric = 'RMSE')
y.pred <- predict(model.obj, newdata = X.test.scaled)
#RMSE(pred = y.pred, obs = y.test)
tibble(y_test = y.test, y_pred = y.pred) %>%
ggplot() +
theme_light() +
geom_point(mapping = aes(x = y_test, y = y_pred)) +
geom_smooth(mapping = aes(x = y_test, y = y_pred), method = 'lm', formula = y~x) +
geom_abline(mapping = aes(slope = 1, intercept = 0, , colour = 'y_pred = y_test'), show.legend = TRUE)
library(caret)
library(magrittr)
library(tidyverse)
df <- mtcars %>% as_tibble()
df %>% head
df %>% cor %>% corrplot::corrplot()
set.seed(seed = 0)
X <- df %>% select(wt, qsec, am)
y <- df %>% pull(mpg)
partition <- createDataPartition(y = y, p = 0.75, list = FALSE)
df.train <- df[partition,]
df.test <- df[- partition,]
X.train <- df.train %>% select(wt, qsec, am)
y.train <- df.train %>% pull(mpg)
X.test <- df.test %>% select(wt, qsec, am)
y.test <- df.test %>% pull(mpg)
scaler.obj <- preProcess(x = X.train, method = c('center', 'scale'))
X.train.scaled <- predict(object = scaler.obj, newdata = X.train)
X.test.scaled <- predict(object = scaler.obj, newdata = X.test)
model.obj <-  train(x = X.train.scaled,
y = y.train,
method = 'ridge',
trControl = trainControl(method = 'cv', number = 3),
metric = 'RMSE')
y.pred <- predict(model.obj, newdata = X.test.scaled)
#RMSE(pred = y.pred, obs = y.test)
tibble(y_test = y.test, y_pred = y.pred) %>%
ggplot() +
theme_light() +
geom_point(mapping = aes(x = y_test, y = y_pred)) +
geom_smooth(mapping = aes(x = y_test, y = y_pred), method = 'lm', formula = y~x) +
geom_abline(mapping = aes(slope = 1, intercept = 0, , colour = 'y_pred = y_test'), show.legend = TRUE)
GetNewPredictions <- function(model, transformer, newdata){
newdata.transformed <- predict(object = transformer, newdata = newdata)
new.predictions <- predict(object = model, newdata = newdata.transformed)
return(new.predictions)
}
GetNewPredictions(model = model.obj, transformer = scaler.obj, newdata = X.test)
library(plumber)
setwd(dir = here::here())
r <- plumb(file = 'plumber.R')
r$run(port = 8000)
library(httr)
GET(url = 'http://localhost:8000/predict?am=1&qsec=1&wt=1')
library(httr)
GET(url = 'http://localhost:8000/predict?am=1&qsec=1&wt=1')
library(caret)
library(magrittr)
library(tidyverse)
df <- mtcars %>% as_tibble()
df %>% head
df %>% cor %>% corrplot::corrplot()
set.seed(seed = 0)
X <- df %>% select(wt, qsec, am)
y <- df %>% pull(mpg)
partition <- createDataPartition(y = y, p = 0.75, list = FALSE)
df.train <- df[partition,]
df.test <- df[- partition,]
X.train <- df.train %>% select(wt, qsec, am)
y.train <- df.train %>% pull(mpg)
X.test <- df.test %>% select(wt, qsec, am)
y.test <- df.test %>% pull(mpg)
scaler.obj <- preProcess(x = X.train, method = c('center', 'scale'))
X.train.scaled <- predict(object = scaler.obj, newdata = X.train)
X.test.scaled <- predict(object = scaler.obj, newdata = X.test)
model.obj <-  train(x = X.train.scaled,
y = y.train,
method = 'ridge',
trControl = trainControl(method = 'cv', number = 3),
metric = 'RMSE')
y.pred <- predict(model.obj, newdata = X.test.scaled)
#RMSE(pred = y.pred, obs = y.test)
tibble(y_test = y.test, y_pred = y.pred) %>%
ggplot() +
theme_light() +
geom_point(mapping = aes(x = y_test, y = y_pred)) +
geom_smooth(mapping = aes(x = y_test, y = y_pred), method = 'lm', formula = y~x) +
geom_abline(mapping = aes(slope = 1, intercept = 0, , colour = 'y_pred = y_test'), show.legend = TRUE)
GetNewPredictions <- function(model, transformer, newdata){
newdata.transformed <- predict(object = transformer, newdata = newdata)
new.predictions <- predict(object = model, newdata = newdata.transformed)
return(new.predictions)
}
GetNewPredictions(model = model.obj, transformer = scaler.obj, newdata = X.test)
library(plumber)
setwd(dir = here::here())
r <- plumb(file = 'plumber.R')
r$run(port = 8000)
y.pred <- predict(model.obj, newdata = X.test.scaled)
#RMSE(pred = y.pred, obs = y.test)
tibble(y_test = y.test, y_pred = y.pred) %>%
ggplot() +
theme_light() +
geom_point(mapping = aes(x = y_test, y = y_pred)) +
geom_smooth(mapping = aes(x = y_test, y = y_pred), method = 'lm', formula = y~x) +
geom_abline(mapping = aes(slope = 1, intercept = 0, colour = 'y_pred = y_test'), show.legend = TRUE)
y.pred <- predict(model.obj, newdata = X.test.scaled)
#RMSE(pred = y.pred, obs = y.test)
tibble(y_test = y.test, y_pred = y.pred) %>%
ggplot() +
theme_light() +
geom_point(mapping = aes(x = y_test, y = y_pred)) +
geom_smooth(mapping = aes(x = y_test, y = y_pred, colour = "h"), method = 'lm', formula = y~x) +
geom_abline(mapping = aes(slope = 1, intercept = 0, colour = 'y_pred = y_test'), show.legend = TRUE)
y.pred <- predict(model.obj, newdata = X.test.scaled)
#RMSE(pred = y.pred, obs = y.test)
tibble(y_test = y.test, y_pred = y.pred) %>%
ggplot() +
theme_light() +
geom_point(mapping = aes(x = y_test, y = y_pred)) +
geom_smooth(mapping = aes(x = y_test, y = y_pred, colour = 'y_pred ~ y_test'), method = 'lm', formula = y~x) +
geom_abline(mapping = aes(slope = 1, intercept = 0, colour = 'y_pred = y_test'), show.legend = TRUE)
library(httr)
GET(url = 'http://localhost:8000/predict?am=1&qsec=1&wt=1') %>% content
library(httr)
library(magrittr)
library(tidyverse)
GET(url = 'http://localhost:8000/predict?am=1&qsec=1&wt=1') %>% content
GET(url = 'http://localhost:8000/predict?am=1&qsec=16.46&wt=2.62') %>% content
setwd('/Users/juanitorduz/juanitorduz.github.io/')
library(knitr)
KnitPost <- function(input, outfile, figsfolder, cachefolder, base.url = '/') {
opts_knit$set(base.url = base.url)
fig.path <- paste0(figsfolder, sub(".Rmd$", "", basename(input)), "/")
cache.path <- file.path(cachefolder, sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(cache.path = cache.path)
opts_chunk$set(fig.cap = "center")
render_markdown()
knit(input = input, output = outfile , envir = parent.frame())
}
knit_folder <- function(infolder, outfolder, figsfolder, cachefolder, force = F) {
for (infile in list.files(path = infolder, pattern = "*.Rmd", full.names = TRUE)) {
print(infile)
outfile = paste0(outfolder, "/", sub(".Rmd$", ".md", basename(infile)))
print(outfile)
# knit only if the input file is the last one modified
if (!file.exists(outfile) | file.info(infile)$mtime > file.info(outfile)$mtime) {
KnitPost(input = infile,
outfile = outfile,
figsfolder = figsfolder,
cachefolder = cachefolder)
}
}
}
knit_folder(infolder = '_R/R_notebooks',
outfolder = 'content',
figsfolder = 'content/images/',
cachefolder = '_caches')
