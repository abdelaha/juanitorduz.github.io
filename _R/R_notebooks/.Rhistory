sd <- 0.7
all.samples <- all.points %>% map(.f = function(x) x + rnorm(n = d, mean = 0, sd = sd))
all.samples.df <- all.samples %>% reduce(.f = function(x, y) rbind(x, y)) %>% as.tibble
all.samples.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
ComputeRMSE <- function(all.samples, r, N) {
all.samples %>% map(.f = function(x) (r - norm(x, type = '2'))^2) %>%
reduce(.f = function(x, y) sum(x, y)) / N
}
rmse.df <- seq(from = 0.5, to = 10, by = 0.1) %>%
map(.f = function(r) c(r, ComputeRMSE(all.samples = all.samples, r = r, N = N ))) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(r = V1, RMSE = V2)
rmse.df %>% ggplot() + theme_light() + geom_line(mapping = aes(x = r, y = RMSE))
optim.obj <- optim(par = 1, fn = function(r) ComputeRMSE(all.samples = all.samples, r = r, N = N))
r.hat = optim.obj$par
library(tidyverse)
d <- 2
N <- 200
R <- 4
points.0 <- 1:N %>% lapply(FUN = function(x) runif(n = d - 1, min =  - R, max = R))
all.points <- points.0 %>% map(.f = function(x) c(x, sign(runif(n = 1, min = - 1, max = 1))*sqrt(R^2 - norm(x, type = '2')^2)))
all.points.df <- all.points %>% reduce(.f = function(x, y) rbind(x, y)) %>% as.tibble
all.points.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
sd <- 0.5
all.samples <- all.points %>% map(.f = function(x) x + rnorm(n = d, mean = 0, sd = sd))
all.samples.df <- all.samples %>% reduce(.f = function(x, y) rbind(x, y)) %>% as.tibble
all.samples.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
ComputeRMSE <- function(all.samples, r, N) {
all.samples %>% map(.f = function(x) (r - norm(x, type = '2'))^2) %>%
reduce(.f = function(x, y) sum(x, y)) / N
}
rmse.df <- seq(from = 0.5, to = 10, by = 0.1) %>%
map(.f = function(r) c(r, ComputeRMSE(all.samples = all.samples, r = r, N = N ))) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(r = V1, RMSE = V2)
rmse.df %>% ggplot() + theme_light() + geom_line(mapping = aes(x = r, y = RMSE))
optim.obj <- optim(par = 1, fn = function(r) ComputeRMSE(all.samples = all.samples, r = r, N = N))
r.hat = optim.obj$par
library(tidyverse)
d <- 2
N <- 200
R <- 4
points.0 <- 1:N %>% lapply(FUN = function(x) runif(n = d - 1, min =  - R, max = R))
all.points <- points.0 %>% map(.f = function(x) c(x, sign(runif(n = 1, min = - 1, max = 1))*sqrt(R^2 - norm(x, type = '2')^2)))
all.points.df <- all.points %>% reduce(.f = function(x, y) rbind(x, y)) %>% as.tibble
all.points.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
sd <- 0.5
all.samples <- all.points %>% map(.f = function(x) x + rnorm(n = d, mean = 0, sd = sd))
all.samples.df <- all.samples %>% reduce(.f = function(x, y) rbind(x, y)) %>% as.tibble
all.samples.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
ComputeRMSE <- function(all.samples, r, N) {
all.samples %>% map(.f = function(x) (r - norm(x, type = '2'))^2) %>%
reduce(.f = function(x, y) sum(x, y)) / N
}
rmse.df <- seq(from = 0.5, to = 10, by = 0.1) %>%
map(.f = function(r) c(r, ComputeRMSE(all.samples = all.samples, r = r, N = N ))) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(r = V1, RMSE = V2)
rmse.df %>% ggplot() + theme_light() + geom_line(mapping = aes(x = r, y = RMSE))
optim.obj <- optim(par = 1, fn = function(r) ComputeRMSE(all.samples = all.samples, r = r, N = N))
r.hat = optim.obj$par
library(tidyverse)
d <- 2
N <- 200
R <- 4
points.0 <- 1:N %>% lapply(FUN = function(x) runif(n = d - 1, min =  - R, max = R))
all.points <- points.0 %>% map(.f = function(x) c(x, sign(runif(n = 1, min = - 1, max = 1))*sqrt(R^2 - norm(x, type = '2')^2)))
all.points.df <- all.points %>% reduce(.f = function(x, y) rbind(x, y)) %>% as.tibble
all.points.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
sd <- 0.5
all.samples <- all.points %>% map(.f = function(x) x + rnorm(n = d, mean = 0, sd = sd))
all.samples.df <- all.samples %>% reduce(.f = function(x, y) rbind(x, y)) %>% as.tibble
all.samples.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
ComputeRMSE <- function(all.samples, r, N) {
all.samples %>% map(.f = function(x) (r - norm(x, type = '2'))^2) %>%
reduce(.f = function(x, y) sum(x, y)) / N
}
rmse.df <- seq(from = 0.5, to = 10, by = 0.1) %>%
map(.f = function(r) c(r, ComputeRMSE(all.samples = all.samples, r = r, N = N ))) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(r = V1, RMSE = V2)
rmse.df %>% ggplot() + theme_light() + geom_line(mapping = aes(x = r, y = RMSE))
optim.obj <- optim(par = 1, fn = function(r) ComputeRMSE(all.samples = all.samples, r = r, N = N))
r.hat = optim.obj$par
library(tidyverse)
d <- 2
N <- 500
R <- 4
points.0 <- 1:N %>% lapply(FUN = function(x) runif(n = d - 1, min =  - R, max = R))
all.points <- points.0 %>% map(.f = function(x) c(x, sign(runif(n = 1, min = - 1, max = 1))*sqrt(R^2 - norm(x, type = '2')^2)))
all.points.df <- all.points %>% reduce(.f = function(x, y) rbind(x, y)) %>% as.tibble
all.points.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
sd <- 0.5
all.samples <- all.points %>% map(.f = function(x) x + rnorm(n = d, mean = 0, sd = sd))
all.samples.df <- all.samples %>% reduce(.f = function(x, y) rbind(x, y)) %>% as.tibble
all.samples.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
ComputeRMSE <- function(all.samples, r, N) {
all.samples %>% map(.f = function(x) (r - norm(x, type = '2'))^2) %>%
reduce(.f = function(x, y) sum(x, y)) / N
}
rmse.df <- seq(from = 0.5, to = 10, by = 0.1) %>%
map(.f = function(r) c(r, ComputeRMSE(all.samples = all.samples, r = r, N = N ))) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(r = V1, RMSE = V2)
rmse.df %>% ggplot() + theme_light() + geom_line(mapping = aes(x = r, y = RMSE))
optim.obj <- optim(par = 1, fn = function(r) ComputeRMSE(all.samples = all.samples, r = r, N = N))
r.hat = optim.obj$par
library(tidyverse)
d <- 2
N <- 100
R <- 4
points.0 <- 1:N %>% lapply(FUN = function(x) runif(n = d - 1, min =  - R, max = R))
all.points <- points.0 %>% map(.f = function(x) c(x, sign(runif(n = 1, min = - 1, max = 1))*sqrt(R^2 - norm(x, type = '2')^2)))
all.points.df <- all.points %>% reduce(.f = function(x, y) rbind(x, y)) %>% as.tibble
all.points.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
sd <- 0.5
all.samples <- all.points %>% map(.f = function(x) x + rnorm(n = d, mean = 0, sd = sd))
all.samples.df <- all.samples %>% reduce(.f = function(x, y) rbind(x, y)) %>% as.tibble
all.samples.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
ComputeRMSE <- function(all.samples, r, N) {
all.samples %>% map(.f = function(x) (r - norm(x, type = '2'))^2) %>%
reduce(.f = function(x, y) sum(x, y)) / N
}
rmse.df <- seq(from = 0.5, to = 10, by = 0.1) %>%
map(.f = function(r) c(r, ComputeRMSE(all.samples = all.samples, r = r, N = N ))) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(r = V1, RMSE = V2)
rmse.df %>% ggplot() + theme_light() + geom_line(mapping = aes(x = r, y = RMSE))
optim.obj <- optim(par = 1, fn = function(r) ComputeRMSE(all.samples = all.samples, r = r, N = N))
r.hat = optim.obj$par
d <- 1
N <- 100
R <- 4
points.0 <- 1:N %>% lapply(FUN = function(x) runif(n = d - 1, min =  - R, max = R))
all.points <- points.0 %>% map(.f = function(x) c(x, sign(runif(n = 1, min = - 1, max = 1))*sqrt(R^2 - norm(x, type = '2')^2)))
d <- 1
N <- 100
R <- 4
points.0 <- 1:N %>% lapply(FUN = function(x) runif(n = d - 1, min =  - R, max = R))
all.points <- points.0 %>% map(.f = function(x) c(x, sign(runif(n = 1, min = - 1, max = 1))*sqrt(R^2 - norm(x, type = '2')^2)))
points.0
d <- 2
N <- 100
R <- 4
points.0 <- 1:N %>% lapply(FUN = function(x) runif(n = d - 1, min =  - R, max = R))
all.points <- points.0 %>% map(.f = function(x) c(x, sign(runif(n = 1, min = - 1, max = 1))*sqrt(R^2 - norm(x, type = '2')^2)))
all.points.df <- all.points %>% reduce(.f = function(x, y) rbind(x, y)) %>% as.tibble
all.points.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
library(tidyverse)
d <- 3
N <- 100
R <- 4
points.0 <- 1:N %>% lapply(FUN = function(x) runif(n = d - 1, min =  - R, max = R))
all.points <- points.0 %>% map(.f = function(x) c(x, sign(runif(n = 1, min = - 1, max = 1))*sqrt(R^2 - norm(x, type = '2')^2)))
all.points.df <- all.points %>% reduce(.f = function(x, y) rbind(x, y)) %>% as.tibble
all.points.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
sd <- 0.5
all.samples <- all.points %>% map(.f = function(x) x + rnorm(n = d, mean = 0, sd = sd))
all.samples.df <- all.samples %>% reduce(.f = function(x, y) rbind(x, y)) %>% as.tibble
all.samples.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
ComputeRMSE <- function(all.samples, r, N) {
all.samples %>% map(.f = function(x) (r - norm(x, type = '2'))^2) %>%
reduce(.f = function(x, y) sum(x, y)) / N
}
rmse.df <- seq(from = 0.5, to = 10, by = 0.1) %>%
map(.f = function(r) c(r, ComputeRMSE(all.samples = all.samples, r = r, N = N ))) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(r = V1, RMSE = V2)
library(tidyverse)
d <- 2
N <- 100
R <- 4
points.0 <- 1:N %>% lapply(FUN = function(x) runif(n = d - 1, min =  - R, max = R))
all.points <- points.0 %>% map(.f = function(x) c(x, sign(runif(n = 1, min = - 1, max = 1))*sqrt(R^2 - norm(x, type = '2')^2)))
all.points.df <- all.points %>% reduce(.f = function(x, y) rbind(x, y)) %>% as.tibble
all.points.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
sd <- 0.5
all.samples <- all.points %>% map(.f = function(x) x + rnorm(n = d, mean = 0, sd = sd))
all.samples.df <- all.samples %>% reduce(.f = function(x, y) rbind(x, y)) %>% as.tibble
all.samples.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
ComputeRMSE <- function(all.samples, r, N) {
all.samples %>% map(.f = function(x) (r - norm(x, type = '2'))^2) %>%
reduce(.f = function(x, y) sum(x, y)) / N
}
rmse.df <- seq(from = 0.5, to = 10, by = 0.1) %>%
map(.f = function(r) c(r, ComputeRMSE(all.samples = all.samples, r = r, N = N ))) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(r = V1, RMSE = V2)
rmse.df %>% ggplot() + theme_light() + geom_line(mapping = aes(x = r, y = RMSE))
optim.obj <- optim(par = 1, fn = function(r) ComputeRMSE(all.samples = all.samples, r = r, N = N))
r.hat = optim.obj$par
all.samples
all.samples
all.samples %>% map(.f = function(x) x /norm(x, type = '2'))
all.samples %>% map(.f = function(x) x /norm(x, type = '2')) %>% map(.f = norm())
all.samples %>% map(.f = function(x) x /norm(x, type = '2')) %>% map(.f = function(x) norm(x, "2")
all.samples %>% map(.f = function(x) x /norm(x, type = '2')) %>% map(.f = function(x) norm(x, type = "2"))
all.samples %>% map(.f = function(x) x /norm(x, type = '2')) %>% map(.f = function(x) norm(x, type = '2'))
all.samples %>% map(.f = function(x) r.hat*x /norm(x, type = '2')) %>% map(.f = function(x) norm(x, type = '2'))
all.samples %>% map(.f = function(x) r.hat*x /norm(x, type = '2')) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble
all.samples %>% map(.f = function(x) r.hat*x /norm(x, type = '2')) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>% cbind(all.samples.df)
all.samples %>% map(.f = function(x) r.hat*x /norm(x, type = '2')) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble #%>% cbind(all.samples.df)
all.samples %>% map(.f = function(x) r.hat*x /norm(x, type = '2')) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>% rename(W1 = V1, W2 =V2) %>% cbind(all.samples.df)
sd <- 0.5
all.samples <- all.points %>% map(.f = function(x) x + rnorm(n = d, mean = 0, sd = sd))
all.samples.df <- all.samples %>% reduce(.f = function(x, y) rbind(x, y)) %>% as.tibble
all.samples.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
all.samples %>% map(.f = function(x) r.hat*x /norm(x, type = '2')) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>% rename(W1 = V1, W2 =V2) %>%
cbind(all.samples.df) %>%
ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
all.samples %>% map(.f = function(x) r.hat*x /norm(x, type = '2')) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>% rename(W1 = V1, W2 =V2) %>%
cbind(all.samples.df) %>%
ggplot() +
theme_light() +
geom_point(mapping = aes(x = V1, y = V2)) +
geom_point(mapping = aes(x = W1, y = W2))
all.samples %>% map(.f = function(x) r.hat*x /norm(x, type = '2')) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>% rename(W1 = V1, W2 =V2) %>%
cbind(all.samples.df) %>%
ggplot() +
theme_light() +
geom_point(mapping = aes(x = V1, y = V2)) +
geom_point(mapping = aes(x = W1, y = W2), color = 'red')
library(tidyverse)
d <- 2
N <- 100
R <- 4
points.0 <- 1:N %>% lapply(FUN = function(x) runif(n = d - 1, min =  - R, max = R))
all.points <- points.0 %>% map(.f = function(x) c(x, sign(runif(n = 1, min = - 1, max = 1))*sqrt(R^2 - norm(x, type = '2')^2)))
all.points.df <- all.points %>% reduce(.f = function(x, y) rbind(x, y)) %>% as.tibble
all.points.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
sd <- 0.5
all.samples <- all.points %>% map(.f = function(x) x + rnorm(n = d, mean = 0, sd = sd))
all.samples.df <- all.samples %>% reduce(.f = function(x, y) rbind(x, y)) %>% as.tibble
all.samples.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
ComputeRMSE <- function(all.samples, r, N) {
all.samples %>% map(.f = function(x) (r - norm(x, type = '2'))^2) %>%
reduce(.f = function(x, y) sum(x, y)) / N
}
rmse.df <- seq(from = 0.5, to = 10, by = 0.1) %>%
map(.f = function(r) c(r, ComputeRMSE(all.samples = all.samples, r = r, N = N ))) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(r = V1, RMSE = V2)
rmse.df %>% ggplot() + theme_light() + geom_line(mapping = aes(x = r, y = RMSE))
optim.obj <- optim(par = 1, fn = function(r) ComputeRMSE(all.samples = all.samples, r = r, N = N))
r.hat = optim.obj$par
all.samples %>% map(.f = function(x) r.hat*x /norm(x, type = '2')) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>% rename(W1 = V1, W2 =V2) %>%
cbind(all.samples.df) %>%
ggplot() +
theme_light() +
geom_point(mapping = aes(x = V1, y = V2)) +
geom_point(mapping = aes(x = W1, y = W2), color = 'red')
library(tidyverse)
d <- 2
N <- 200
R <- 4
points.0 <- 1:N %>% lapply(FUN = function(x) runif(n = d - 1, min =  - R, max = R))
all.points <- points.0 %>% map(.f = function(x) c(x, sign(runif(n = 1, min = - 1, max = 1))*sqrt(R^2 - norm(x, type = '2')^2)))
all.points.df <- all.points %>% reduce(.f = function(x, y) rbind(x, y)) %>% as.tibble
all.points.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
sd <- 0.5
all.samples <- all.points %>% map(.f = function(x) x + rnorm(n = d, mean = 0, sd = sd))
all.samples.df <- all.samples %>% reduce(.f = function(x, y) rbind(x, y)) %>% as.tibble
all.samples.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = V1, y = V2))
ComputeRMSE <- function(all.samples, r, N) {
all.samples %>% map(.f = function(x) (r - norm(x, type = '2'))^2) %>%
reduce(.f = function(x, y) sum(x, y)) / N
}
rmse.df <- seq(from = 0.5, to = 10, by = 0.1) %>%
map(.f = function(r) c(r, ComputeRMSE(all.samples = all.samples, r = r, N = N ))) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(r = V1, RMSE = V2)
rmse.df %>% ggplot() + theme_light() + geom_line(mapping = aes(x = r, y = RMSE))
optim.obj <- optim(par = 1, fn = function(r) ComputeRMSE(all.samples = all.samples, r = r, N = N))
r.hat = optim.obj$par
all.samples %>% map(.f = function(x) r.hat*x /norm(x, type = '2')) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>% rename(W1 = V1, W2 =V2) %>%
cbind(all.samples.df) %>%
ggplot() +
theme_light() +
geom_point(mapping = aes(x = V1, y = V2)) +
geom_point(mapping = aes(x = W1, y = W2), color = 'red')
library(tidyverse)
# Dimension of the space.
d <- 2
# Number of sample points.
N <- 1000
# Radius.
R <- 4
# Generate random sample of points (x - axis).
points.0 <- 1:N %>% map(.f = function(x) runif(n = d - 1, min =  - R, max = R))
# Generate the corresponding y - coordinates.
all.points <- points.0 %>% map(.f = function(x) c(x, sign(runif(n = 1, min = - 1, max = 1))*sqrt(R^2 - norm(x, type = '2')^2)))
# Store data in a tibble.
all.points.df <- all.points %>% reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(x = V1, y = V2)
# Plot the data.
all.points.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = x, y = y))
# Set standard deviation.
sd <- 0.5
# Add noise.
all.samples <- all.points %>% map(.f = function(x) x + rnorm(n = d, mean = 0, sd = sd))
# Store data in a tibble.
all.samples.df <- all.samples %>% reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(x = V1, y = V2)
# Plot the data.
all.samples.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = x, y = y))
# Define function to optimize.
ComputeRMSE <- function(all.samples, r, N) {
all.samples %>% map_dbl(.f = function(x) (r - norm(x, type = '2'))^2) %>% mean
}
rmse.df <- seq(from = 0.5, to = 10, by = 0.1) %>%
map(.f = function(r) c(r, ComputeRMSE(all.samples = all.samples, r = r, N = N ))) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(r = V1, RMSE = V2)
rmse.df %>% ggplot() + theme_light() + geom_line(mapping = aes(x = r, y = RMSE))
opt.obj <- optimize(f =function(r) ComputeRMSE(all.samples = all.samples, r = r, N = N), interval = 1:10)
r.hat <- opt.obj$minimum
r.hat
all.samples %>% map(.f = function(x) r.hat*x /norm(x, type = '2')) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(x1 = V1, y1 =V2) %>%
cbind(all.samples.df) %>%
ggplot() +
theme_light() +
geom_point(mapping = aes(x = x, y = y)) +
geom_point(mapping = aes(x = x1, y = y1), color = 'red')
r.hat <- all.samples %>% map_dbl(.f = function(x) norm(x, type = '2')) %>% mean
r.hat
library(tidyverse)
# Dimension of the space.
d <- 2
# Number of sample points.
N <- 1000
# Radius.
R <- 4
# Generate random sample of points (x - axis).
points.0 <- 1:N %>% map(.f = function(x) runif(n = d - 1, min =  - R, max = R))
# Generate the corresponding y - coordinates.
all.points <- points.0 %>% map(.f = function(x) c(x, sign(runif(n = 1, min = - 1, max = 1))*sqrt(R^2 - norm(x, type = '2')^2)))
# Store data in a tibble.
all.points.df <- all.points %>% reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(x = V1, y = V2)
# Plot the data.
all.points.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = x, y = y))
# Set standard deviation.
sd <- 0.5
# Add noise.
all.samples <- all.points %>% map(.f = function(x) x + rnorm(n = d, mean = 0, sd = sd))
# Store data in a tibble.
all.samples.df <- all.samples %>% reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(x = V1, y = V2)
# Plot the data.
all.samples.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = x, y = y))
# Define function to optimize.
ComputeRMSE <- function(all.samples, r, N) {
all.samples %>% map_dbl(.f = function(x) (r - norm(x, type = '2'))^2) %>% mean
}
rmse.df <- seq(from = 0.5, to = 10, by = 0.1) %>%
map(.f = function(r) c(r, ComputeRMSE(all.samples = all.samples, r = r, N = N ))) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(r = V1, RMSE = V2)
rmse.df %>% ggplot() + theme_light() + geom_line(mapping = aes(x = r, y = RMSE))
opt.obj <- optimize(f =function(r) ComputeRMSE(all.samples = all.samples, r = r, N = N), interval = 1:10)
r.hat <- opt.obj$minimum
r.hat
all.samples %>% map(.f = function(x) r.hat*x /norm(x, type = '2')) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(x1 = V1, y1 =V2) %>%
cbind(all.samples.df) %>%
ggplot() +
theme_light() +
geom_point(mapping = aes(x = x, y = y)) +
geom_point(mapping = aes(x = x1, y = y1), color = 'red')
r.hat <- all.samples %>% map_dbl(.f = function(x) norm(x, type = '2')) %>% mean
r.hat
library(tidyverse)
# Dimension of the space.
d <- 2
# Number of sample points.
N <- 1000
# Radius.
R <- 4
# Generate random sample of points (x - axis).
points.0 <- 1:N %>% map(.f = function(x) runif(n = d - 1, min =  - R, max = R))
# Generate the corresponding y - coordinates.
all.points <- points.0 %>% map(.f = function(x) c(x, sign(runif(n = 1, min = - 1, max = 1))*sqrt(R^2 - norm(x, type = '2')^2)))
# Store data in a tibble.
all.points.df <- all.points %>% reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(x = V1, y = V2)
# Plot the data.
all.points.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = x, y = y))
# Set standard deviation.
sd <- 0.5
# Add noise.
all.samples <- all.points %>% map(.f = function(x) x + rnorm(n = d, mean = 0, sd = sd))
# Store data in a tibble.
all.samples.df <- all.samples %>% reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(x = V1, y = V2)
# Plot the data.
all.samples.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = x, y = y))
# Define function to optimize.
ComputeRMSE <- function(all.samples, r, N) {
all.samples %>% map_dbl(.f = function(x) (r - norm(x, type = '2'))^2) %>% mean
}
rmse.df <- seq(from = 0.5, to = 10, by = 0.1) %>%
map(.f = function(r) c(r, ComputeRMSE(all.samples = all.samples, r = r, N = N ))) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(r = V1, RMSE = V2)
rmse.df %>% ggplot() + theme_light() + geom_line(mapping = aes(x = r, y = RMSE))
opt.obj <- optimize(f =function(r) ComputeRMSE(all.samples = all.samples, r = r, N = N), interval = 1:10)
r.hat <- opt.obj$minimum
r.hat
all.samples %>% map(.f = function(x) r.hat*x /norm(x, type = '2')) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(x1 = V1, y1 =V2) %>%
cbind(all.samples.df) %>%
ggplot() +
theme_light() +
geom_point(mapping = aes(x = x, y = y)) +
geom_point(mapping = aes(x = x1, y = y1), color = 'red')
r.hat <- all.samples %>% map_dbl(.f = function(x) norm(x, type = '2')) %>% mean
r.hat
library(tidyverse)
# Dimension of the space.
d <- 2
# Number of sample points.
N <- 1000
# Radius.
R <- 4
# Generate random sample of points (x - axis).
points.0 <- 1:N %>% map(.f = function(x) runif(n = d - 1, min =  - R, max = R))
# Generate the corresponding y - coordinates.
all.points <- points.0 %>% map(.f = function(x) c(x, sign(runif(n = 1, min = - 1, max = 1))*sqrt(R^2 - norm(x, type = '2')^2)))
# Store data in a tibble.
all.points.df <- all.points %>% reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(x = V1, y = V2)
# Plot the data.
all.points.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = x, y = y))
# Set standard deviation.
sd <- 0.5
# Add noise.
all.samples <- all.points %>% map(.f = function(x) x + rnorm(n = d, mean = 0, sd = sd))
# Store data in a tibble.
all.samples.df <- all.samples %>% reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(x = V1, y = V2)
# Plot the data.
all.samples.df %>% ggplot() + theme_light() + geom_point(mapping = aes(x = x, y = y))
# Define function to optimize.
ComputeRMSE <- function(all.samples, r, N) {
all.samples %>% map_dbl(.f = function(x) (r - norm(x, type = '2'))^2) %>% mean
}
rmse.df <- seq(from = 0.5, to = 10, by = 0.1) %>%
map(.f = function(r) c(r, ComputeRMSE(all.samples = all.samples, r = r, N = N ))) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(r = V1, RMSE = V2)
rmse.df %>% ggplot() + theme_light() + geom_line(mapping = aes(x = r, y = RMSE))
opt.obj <- optimize(f =function(r) ComputeRMSE(all.samples = all.samples, r = r, N = N), interval = 1:10)
r.hat <- opt.obj$minimum
r.hat
all.samples %>% map(.f = function(x) r.hat*x /norm(x, type = '2')) %>%
reduce(.f = function(x, y) rbind(x, y)) %>%
as.tibble %>%
rename(x1 = V1, y1 =V2) %>%
cbind(all.samples.df) %>%
ggplot() +
theme_light() +
geom_point(mapping = aes(x = x, y = y)) +
geom_point(mapping = aes(x = x1, y = y1), color = 'red')
r.hat <- all.samples %>% map_dbl(.f = function(x) norm(x, type = '2')) %>% mean
r.hat
